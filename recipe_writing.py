# -*- coding: utf-8 -*-
"""recipe-writing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-2WZIk5QbkbD7tGKsB9eFHLf7Ud76NFF
"""

# Commented out IPython magic to ensure Python compatibility.
# %run ../input/python-recipes/dhtml.py
# %run ../input/python-recipes/embedding_html_string.py
dhtml('Writing Python Recipes')

# Commented out IPython magic to ensure Python compatibility.
# %%writefile sage_call.py
# from IPython.core.display import display,HTML
# from IPython.core.magic import register_line_magic
# 
# @register_line_magic
# def sage_autorun(code_string):
#     start_string=\
#     """<html><head><meta charset='utf-8'>"""+\
#     """<meta name='viewport' content='width=device-width'>"""+\
#     """<script src='https://sagecell.sagemath.org/static/"""+\
#     """embedded_sagecell.js'></script><script>"""+\
#     """$(function () {sagecell.makeSagecell({"""+\
#     """inputLocation:'div.autosage',evalButtonText:'run',"""+\
#     """template:sagecell.templates.minimal,autoeval:true});});"""+\
#     """</script></head><style>.sagecell_output pre{"""+\
#     """min-height:3em; max-height:30em;} """+\
#     """.sagecell .CodeMirror-scroll {"""+\
#     """min-height:3em; max-height:30em;}</style><body>"""+\
#     """<div class='autosage'><script type='text/x-sage'>"""
#     split_code_string=code_string.split('  ')
#     code_string=""""""; c=0
#     for el in split_code_string:
#         if el!='':
#             code_string+=c*'  '+el+'\n'; c=0
#         else: c+=1
#     end_string="""</script></div></body></html>"""
#     display(HTML(start_string+code_string+end_string))
#     
# @register_line_magic
# def sage_run(code_string):
#     start_string=\
#     """<html><head><meta charset='utf-8'>"""+\
#     """<meta name='viewport' content='width=device-width'>"""+\
#     """<script src='https://sagecell.sagemath.org/static/"""+\
#     """embedded_sagecell.js'></script><script>"""+\
#     """$(function () {sagecell.makeSagecell({"""+\
#     """inputLocation:'div.sage',evalButtonText:'run',"""+\
#     """template:sagecell.templates.minimal});});"""+\
#     """</script></head><style>.sagecell_output pre{"""+\
#     """min-height:3em; max-height:30em;} """+\
#     """.sagecell .CodeMirror-scroll {"""+\
#     """min-height:3em; max-height:30em;}</style><body>"""+\
#     """<div class='sage'><script type='text/x-sage'>"""
#     split_code_string=code_string.split('  ')
#     code_string=""""""; c=0
#     for el in split_code_string:
#         if el!='':
#             code_string+=c*'  '+el+'\n'; c=0
#         else: c+=1
#     end_string="""</script></div></body></html>"""
#     display(HTML(start_string+code_string+end_string))
#     
# print('Evaluation of SageMath cells is possible ') 
# print('now with two additional syntax marks: ') 
# print('the white space and the slash between code lines.')

# Commented out IPython magic to ensure Python compatibility.
# %run sage_call.py

# Commented out IPython magic to ensure Python compatibility.
# %sage_run \
var('x'); t=15 \
f=cos(x); g=sqrt(x)*sin(x); h=cos(sqrt(x)*sin(x)) \
fun=[f,f.diff(),g,g.diff(),h,h.diff()] \
c=[colormaps.hsv_r(35*i)[:3] for i in [0..5]] \
l=[r'$f$',r'$f \prime$',r'$g$', \
   r'$g \prime$',r'$h$',r'$h \prime$'] \
p=plot(fun,(0,t),color=c,thickness=2,fill='axis', \
       fillcolor=c,fillalpha=.1,legend_label=l) \
p.show(figsize=(7,3),legend_fancybox=True, \
       legend_loc=3,legend_font_size=12,gridlines=True)

dhtml('Writing HTML Recipes')

# Commented out IPython magic to ensure Python compatibility.
# %%writefile rpackages.html
# <html>
# <head>
#   <meta charset='utf-8'>
#   <meta name='viewport' content='width=device-width'>
#   <script src='https://sagecell.sagemath.org/static/embedded_sagecell.js'>
#   </script>
#   <script>$(function () {
#     sagecell.makeSagecell({inputLocation:'div.evaluated',autoeval:true,
#                            template:sagecell.templates.minimal,
#                            evalButtonText:'run'}); });
#   </script>
# </head>
# <style>
#   pre {padding-left:3px; border:2px double slategray;}
#   h3 {color:#aa33ff; text-shadow:3px 3px 3px slategray;}
#   .sagecell .CodeMirror-scroll {min-height:3em; max-height:60em;}
#   body {margin:5px 5px 5px 15px;}
# </style>
# <body>
#   <h3>$$\mathbb{ R \; Packages \; in \; Python \; Cells }$$</h3>
# <pre><code>
# import warnings; warnings.filterwarnings('ignore')
# from IPython import display
# import rpy2.robjects as ro
# from rpy2.robjects.packages import importr
# grdevices=importr('grDevices')
# grdevices.svg(file='Rplots.svg',
#               width=int(5),height=int(3),
#               onefile=True,family='times',
#               bg='white',pointsize=int(10))
# ro.r('library(MASS); library(nnet); '+\
#      'data(Boston); n<-dim(Boston)[1]')
# ro.r('model<-nnet(as.matrix(Boston[1:430,-14]),'+\
#      'as.matrix(Boston[1:430,14]),'+\
#      'size=52,trace=F,maxit=10^7,linout=T,decay=.1^5); '+\
#      'predictions<-predict(model,'+\
#      'as.matrix(Boston[431:n,-14]),type="raw")')
# ro.r('plot(as.matrix(Boston[431:n,14]),'+\
#      'cex=.7,col=rgb(0,1,0),type="o",'+\
#      'xlab="",ylab="",yaxt="n"); par(new=T); '+\
#      'plot(predictions,col=rgb(0,0,1),type="o",'+\
#      'cex=.9,ylab="Targets & Predictions"); grid();') 
# grdevices.dev_off()
# 
# </code></pre><br/>
# <div id='cell014' class='evaluated'><script type='text/x-sage'>
# import warnings; warnings.filterwarnings('ignore')
# from IPython import display
# import rpy2.robjects as ro
# from rpy2.robjects.packages import importr
# grdevices=importr('grDevices')
# grdevices.svg(file='Rplots.svg',
#               width=int(5),height=int(3),
#               onefile=True,family='times',
#               bg='white',pointsize=int(10))
# ro.r('library(MASS); library(nnet); '+\
#      'data(Boston); n<-dim(Boston)[1]')
# ro.r('model<-nnet(as.matrix(Boston[1:430,-14]),'+\
#      'as.matrix(Boston[1:430,14]),'+\
#      'size=52,trace=F,maxit=10^7,linout=T,decay=.1^5); '+\
#      'predictions<-predict(model,'+\
#      'as.matrix(Boston[431:n,-14]),type="raw")')
# ro.r('plot(as.matrix(Boston[431:n,14]),'+\
#      'cex=.7,col=rgb(0,1,0),type="o",'+\
#      'xlab="",ylab="",yaxt="n"); par(new=T); '+\
#      'plot(predictions,col=rgb(0,0,1),type="o",'+\
#      'cex=.9,ylab="Targets & Predictions"); grid();') 
# grdevices.dev_off()
# </script></div><br/>
# </body>
# </html>

file='rpackages.html'
with open(file,'r') as f:
    html_str=f.read()
    f.close()
embedding_html_string(html_str,530,950,1)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile 3dline_graph.html
# <html>
#   <head>
#     <meta charset='utf-8'>
#     <meta name='viewport' content='width=device-width'>
#     <script src='https://sagecell.sagemath.org/static/embedded_sagecell.js'></script>
#     <script>$(function () {
#     sagecell.makeSagecell({inputLocation:'div.evaluated',autoeval:true,
#                            template:sagecell.templates.minimal,
#                            evalButtonText:'run'}); });
#     </script>
#   </head>
#   <style>
#   h3 {color:#aa33ff; text-shadow:4px 4px 4px slategray;}
#   pre {width:99%; border:2px double slategray; padding-left:3px;}
#   .sagecell_output {width:99%; border:2px double slategray; padding-right:3px;}
#   body {margin:5px 5px 5px 15px;}
#   </style>  
#   <body>
#     <h3>$$\mathbb{ 3D \; Line \; Graphs }$$</h3>
# <pre ><code>
# def col(): 
#     c1,c2,c3=random(),random(),.8
#     return sage.plot.colors.float_to_html(c1,c2,c3)
# def graph_pe(m,n):
#     g=graphs.CubeGraph(m)
#     PG=Graphics(); k=randint(70,120)/100
#     vg=g.get_pos(); vgp=list(vg.values())
#     eg=g.edges(); nv=len(vg); ne=len(eg)
#     x0=mean([list(vg.values())[i][0] 
#              for i in range(nv)])
#     y0=mean([list(vg.values())[i][1] 
#              for i in range(nv)])
#     cp=[[vgp[i][0]-x0,vgp[i][1]-y0] 
#         for i in range(nv)]
#     l=[[list(vg[eg[i][0]]),list(vg[eg[i][1]])] 
#        for i in range(ne)]
#     cl=[[[x-x0,y-y0] for [x,y] in l[i]] 
#         for i in range(ne)]
#     cp3d=[[[cos(j*pi/k)*x-sin(j*pi/k)*y,
#             sin(j*pi/k)*x+cos(j*pi/k)*y,
#             3*(j+1)/k/n] 
#            for j in range(n)] for [x,y] in cp]
#     cl3d=[[[cos(j*pi/k)*x-sin(j*pi/k)*y,
#             sin(j*pi/k)*x+cos(j*pi/k)*y,
#             3*(j+1)/k/n] 
#            for [x,y] in cl[i]] 
#           for j in range(n) for i in range(ne)]
#     for i in range(nv): 
#         PG+=line3d(cp3d[i],color=col())
#     for i in range(n*ne): 
#         PG+=line3d(cl3d[i],color=col())
#     PG.show(frame=False)
# graph_pe(randint(3,7),randint(3,10))
# 
# </code></pre><br/> 
# <div id='cell015' class='evaluated'><script type='text/x-sage'>
# def col(): 
#     c1,c2,c3=random(),random(),.8
#     return sage.plot.colors.float_to_html(c1,c2,c3)
# def graph_pe(m,n):
#     g=graphs.CubeGraph(m)
#     PG=Graphics(); k=randint(70,120)/100
#     vg=g.get_pos(); vgp=list(vg.values())
#     eg=g.edges(); nv=len(vg); ne=len(eg)
#     x0=mean([list(vg.values())[i][0] 
#              for i in range(nv)])
#     y0=mean([list(vg.values())[i][1] 
#              for i in range(nv)])
#     cp=[[vgp[i][0]-x0,vgp[i][1]-y0] 
#         for i in range(nv)]
#     l=[[list(vg[eg[i][0]]),list(vg[eg[i][1]])] 
#        for i in range(ne)]
#     cl=[[[x-x0,y-y0] for [x,y] in l[i]] 
#         for i in range(ne)]
#     cp3d=[[[cos(j*pi/k)*x-sin(j*pi/k)*y,
#             sin(j*pi/k)*x+cos(j*pi/k)*y,
#             3*(j+1)/k/n] 
#            for j in range(n)] for [x,y] in cp]
#     cl3d=[[[cos(j*pi/k)*x-sin(j*pi/k)*y,
#             sin(j*pi/k)*x+cos(j*pi/k)*y,
#             3*(j+1)/k/n] 
#            for [x,y] in cl[i]] 
#           for j in range(n) for i in range(ne)]
#     for i in range(nv): 
#         PG+=line3d(cp3d[i],color=col())
#     for i in range(n*ne): 
#         PG+=line3d(cl3d[i],color=col())
#     PG.show(frame=False)
# graph_pe(randint(3,7),randint(3,10))
# </script></div><br/>
#   </body>
# </html>

file='3dline_graph.html'
with open(file,'r') as f:
    html_str=f.read()
    f.close()
embedding_html_string(html_str,530,1250,2)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile code_input.html
# <html>
#   <head>
#     <meta charset='utf-8'>
#     <meta name='viewport' content='width=device-width'>
#     <script src='https://sagecell.sagemath.org/static/embedded_sagecell.js'></script>
#     <script>$(function(){ 
#       sagecell.makeSagecell({inputLocation:'#cell016',evalButtonText:'run',
#                              template:sagecell.templates.minimal}); 
#       sagecell.makeSagecell({inputLocation:'#cell017',evalButtonText:'run'}); });
#     </script>
#   </head>
#   <style>
#   pre {padding-left:2px; border:2px double slategray; 
#        font-size:120%; text-shadow:2px 2px 2px #aaa} 
#   .sagecell_output {border-color:slategray; padding-right:2px;}
#   .sagecell .CodeMirror-scroll {min-height:2em; max-height:6em;
#                                 border-color:slategray; 
#                                 font-size:120%; 
#                                 text-shadow:2px 2px 2px #aaa}
#   </style>  
#   <body>   
# $\large{\mathbb{Code \; Input}}$
# <p>An Example of Uneditable Interactive Code</p>
# <pre><code>
# print('These code lines are not editable.\n'+\
#       'But you can run them and see the result.')
# 
# </code></pre><br/>     
# <div id='cell016'><script type='text/x-sage'>
# print('These code lines are not editable.\n'+\
#       'But you can run them and see the result.')
# </script></div>
# <p>An Example of Editable Interactive Code</p>
# <div id='cell017'><script type='text/x-sage'>
# print('These code lines are editable.\n'+\
#       'You can change them right here and run.')
# </script></div>
#   </body>
# </html>

file='code_input.html'
with open(file,'r') as f:
    html_str=f.read()
    f.close()
embedding_html_string(html_str,530,650,3)