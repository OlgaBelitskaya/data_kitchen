# -*- coding: utf-8 -*-
"""recipe-writing-r.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q-deqUGPZeKRLyJ2_snhwgYbrccx7gO3

## Basic R Graphics
"""

conn<-file("col_list.R")
writeLines("#unlock for running in SageMathCell 
#%%r
#svg(filename='Rplots.svg',onefile=T,width=8,height=3,
#    pointsize=12,family='times',bg='white',
#    antialias=c('default','none','gray','subpixel'))
options(repr.plot.width=8,repr.plot.height=3,
        repr.plot.bg='white')
col.list<-c('skyblue','red2','coral','orchid3',
            'bisque','tan','green3','blue4')
plot(1:8,rep(1.5,8),axes=FALSE,pch=15,cex=7,
     col=col.list,xlab=NA,ylab=NA,
     xlim=c(1,8),ylim=c(1,2))
axis(1,at=1:8,labels=sprintf('%s',col.list),
     col='white',cex.axis=1.2,padj=-2)
#dev.off()",conn)

#this command will display code lines
file.show("col_list.R")

#this command will display code outputs
source('col_list.R')

conn<-file("parametric_plot.R")
writeLines("#unlock for running in SageMathCell 
#%%r
#svg(filename='Rplots.svg',onefile=T,width=8,height=8,
#    pointsize=12,family='times',bg='slategray',
#    antialias=c('default','none','gray','subpixel'))
options(repr.plot.width=8,repr.plot.height=8,
        repr.plot.bg='slategray')
T<-seq(from=0,to=2*pi,by=.01*pi)
col<-function(i) {rgb(.005*i,0,1-.005*i)}
curve<-function(t) {list(sin(2*t),sin(5*t))}
X<-sapply(T,curve)[1,]; Y<-sapply(T,curve)[2,] 
for(i in 1:200){
    plot(X[i],Y[i],pch=13,cex=1.5,
         xlim=c(-1.2,1.2),ylim=c(-1.2,1.2),
         col=col(i),xlab='x',ylab='y')
    par(new=TRUE)}
grid(col='black');
#dev.off()",conn)

source('parametric_plot.R')

conn<-file("parametric_plot2.R")
writeLines("#unlock for running in SageMathCell 
#%%r
#svg(filename='Rplots.svg',onefile=T,width=8,height=8,
#    pointsize=12,family='times',bg='black',
#    antialias=c('default','none','gray','subpixel'))
options(repr.plot.width=8,
        repr.plot.height=8,repr.plot.bg='black')
t<-seq(0,2*pi,len=360); n=12; d=.4
x1<-cos(n*t)*cos(t); y1<-cos(n*t)*sin(t) 
x2<-(cos(n*t)+d)*cos(t); y2<-(cos(n*t)+d)*sin(t)
plot(x2,y2,type='o',cex=1,col='#3636ff',lwd=2,
     xlab='',ylab=''); par(new=TRUE); 
plot(x1,y1,type='o',cex=1,col='#ff3636',lwd=2,
     xlim=c(-1-d,1+d),ylim=c(-1-d,1+d),xlab='x',ylab='y',
     fg='white',col.axis='white',col.lab='white'); 
grid(col='white');
#dev.off()",conn)

source('parametric_plot2.R')

"""## Basic R Exercises"""

conn<-file("double_replace.R")
writeLines("#unlock for running in SageMathCell 
#%%r
double_replace1<-
function(string,befor1,after1,befor2,after2) 
    {while (grepl(before1,string) | grepl(before2,string)) 
        {print(string)
         if (grepl(before1,string)) 
             {string<-sub(before1,after1,string) } 
         if (grepl(before2,string))
             {string<-sub(before2,after2,string)}}   
    print(string); return(string)}
double_replace2<-
function(string,befor1,after1,befor2,after2) 
    {while (grepl(before1,string) | grepl(before2,string)) 
        {print(string)
         if (grepl(before1,string)) 
             {string<-sub(before1,after1,string) } 
         else {string<-sub(before2,after2,string)}}   
    print(string); return(string)}",conn)

source('double_replace.R')
string<-paste(replicate(30,'7'),collapse='')
before1<-'7777'; after1<-'8'; before2<-'8888'; after2<-'7'
double_replace1(string,befor1,after1,befor2,after2)

double_replace2(string,befor1,after1,befor2,after2)

"""## Basic R Statistics"""

conn<-file("f_t_test2sample.R")
writeLines("
# samples are random, independent, 
# from normally distributed statistical population
#unlock the magic command in SageMathCell
#%%r
a<-rnorm(16); b<-rnorm(16)
print(a); print(b)
print(var.test(a,b))
print(qf(0.95,15,15))
print(t.test(a,b,var.equal=TRUE,paired=FALSE))
print(qt(.975,30))",conn)

source('f_t_test2sample.R')

conn<-file("aggr_csv.R")
writeLines("#unlock for running in SageMathCell 
#%%r
mean_aggr_csv<-function(url,sep,column,group_by) {
    df<-read.csv(url,header=TRUE,sep='\t')
    len<-dim(df)[1]
    group_list<-list(df[1:len,group_by])
    result<-aggregate(df[column],group_list,mean)
    colnames(result)<-c(group_by,paste0('mean ',column))
    return(result)}
median_aggr_csv<-function(url,sep,column,group_by) {
    df<-read.csv(url,header=TRUE,sep='\t')
    len<-dim(df)[1]
    group_list<-list(df[1:len,group_by])
    result<-aggregate(df[column],group_list,median)
    colnames(result)<-c(group_by,paste0('median ',column))
    return(result)}
sum_aggr_csv<-function(url,sep,column,group_by) {
    df<-read.csv(url,header=TRUE,sep='\t')
    len<-dim(df)[1]
    group_list<-list(df[1:len,group_by])
    result<-aggregate(df[column],group_list,sum) 
    colnames(result)<-c(group_by,paste0('sum ',column))
    return(result)}",conn)

source('aggr_csv.R')
url<-'https://olgabelitskaya.github.io/huge_cities.tsv'
sep='\t'; column<-'growth'; group_by<-'country'
mean_aggr_csv(url,sep,column,group_by)

print(dir()[2:(length(dir())-1)])

"""## Available R Packages"""

ip<-as.data.frame(installed.packages()[,c(1,3)])
rownames(ip)<-NULL; 
cbind(as.matrix(ip[1:40,]),as.matrix(ip[41:80,]),
      as.matrix(ip[81:120,]))

cbind(as.matrix(ip[121:160,]),as.matrix(ip[161:200,]),
      as.matrix(ip[201:240,]))